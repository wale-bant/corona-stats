{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nexport default function useDailyStats(url) {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(),\n      summary = _useState4[0],\n      setSummary = _useState4[1];\n\n  useEffect(function () {\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError(null);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                return setError(err);\n              }));\n\n            case 4:\n              data = _context.sent;\n              setStats(data);\n              setLoading(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    var dayNow = new Date().getDate();\n    var month = new Date().getMonth() + 1;\n    var dateNow = \"2020/0\".concat(month, \"/\").concat(dayNow);\n    stats.map(function (day) {\n      if (day.reportDateString === dateNow) {\n        setSummary(day);\n      }\n    });\n    fetchData();\n    return function () {}; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    loading: loading,\n    error: error,\n    summary: summary\n  };\n}","map":{"version":3,"sources":["/home/icode/Codebase/Personal/Nextjs/corona-stats/components/useDailyStats.js"],"names":["useState","useEffect","useDailyStats","url","loading","setLoading","error","setError","stats","setStats","summary","setSummary","fetchData","fetch","then","res","json","err","data","dayNow","Date","getDate","month","getMonth","dateNow","map","day","reportDateString"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAAA,kBACXH,QAAQ,CAAC,KAAD,CADG;AAAA,MAClCI,OADkC;AAAA,MACzBC,UADyB;;AAAA,mBAEfL,QAAQ,CAAC,IAAD,CAFO;AAAA,MAElCM,KAFkC;AAAA,MAE3BC,QAF2B;;AAAA,mBAGfP,QAAQ,EAHO;AAAA,MAGlCQ,KAHkC;AAAA,MAG3BC,QAH2B;;AAAA,mBAIXT,QAAQ,EAJG;AAAA,MAIlCU,OAJkC;AAAA,MAIzBC,UAJyB;;AAMzCV,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeW,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEP,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ,CAAC,IAAD,CAAR;AAFF;AAAA,+CAGqBM,KAAK,CAACV,GAAD,CAAL,CAChBW,IADgB,CACX,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADQ,WAEV,UAAAC,GAAG;AAAA,uBAAIV,QAAQ,CAACU,GAAD,CAAZ;AAAA,eAFO,CAHrB;;AAAA;AAGQC,cAAAA,IAHR;AAMET,cAAAA,QAAQ,CAACS,IAAD,CAAR;AACAb,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,QAAMc,MAAM,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAf;AACA,QAAMC,KAAK,GAAG,IAAIF,IAAJ,GAAWG,QAAX,KAAwB,CAAtC;AACA,QAAMC,OAAO,mBAAYF,KAAZ,cAAqBH,MAArB,CAAb;AAEAX,IAAAA,KAAK,CAACiB,GAAN,CAAU,UAAAC,GAAG,EAAI;AACf,UAAIA,GAAG,CAACC,gBAAJ,KAAyBH,OAA7B,EAAsC;AACpCb,QAAAA,UAAU,CAACe,GAAD,CAAV;AACD;AACF,KAJD;AAMAd,IAAAA,SAAS;AACT,WAAO,YAAM,CAAE,CAAf,CAtBc,CAuBd;AACD,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO;AAAER,IAAAA,OAAO,EAAPA,OAAF;AAAWE,IAAAA,KAAK,EAALA,KAAX;AAAkBI,IAAAA,OAAO,EAAPA;AAAlB,GAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useDailyStats(url) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState();\n  const [summary, setSummary] = useState();\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError(null);\n      const data = await fetch(url)\n        .then(res => res.json())\n        .catch(err => setError(err));\n      setStats(data);\n      setLoading(false);\n    }\n\n    const dayNow = new Date().getDate();\n    const month = new Date().getMonth() + 1;\n    const dateNow = `2020/0${month}/${dayNow}`;\n\n    stats.map(day => {\n      if (day.reportDateString === dateNow) {\n        setSummary(day);\n      }\n    });\n\n    fetchData();\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return { loading, error, summary };\n}\n"]},"metadata":{},"sourceType":"module"}