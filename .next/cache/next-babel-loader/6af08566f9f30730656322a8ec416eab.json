{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nexport default function useDailyStats(url) {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(null),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var dayNow = new Date().getDate();\n  var month = new Date().getMonth() + 1;\n  var dateNow = \"2020/0\".concat(month, \"/\").concat(dayNow);\n  useEffect(function () {\n    function fetchData() {\n      var data, response;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError(null);\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 5:\n              data = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(data.json());\n\n            case 8:\n              response = _context.sent;\n              response.map(function (day) {\n                if (day.reportDateString === dateNow) {\n                  setStats(2);\n                }\n              });\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              setError(_context.t0);\n\n            case 15:\n              setLoading(false);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 12]], Promise);\n    }\n\n    fetchData();\n    return function () {}; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return {\n    loading: loading,\n    error: error,\n    stats: stats\n  };\n}","map":{"version":3,"sources":["/home/icode/Codebase/Personal/Nextjs/corona-stats/components/useDailyStats.js"],"names":["useState","useEffect","useDailyStats","url","loading","setLoading","error","setError","stats","setStats","dayNow","Date","getDate","month","getMonth","dateNow","fetchData","fetch","data","json","response","map","day","reportDateString"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAAA,kBACXH,QAAQ,CAAC,KAAD,CADG;AAAA,MAClCI,OADkC;AAAA,MACzBC,UADyB;;AAAA,mBAEfL,QAAQ,CAAC,IAAD,CAFO;AAAA,MAElCM,KAFkC;AAAA,MAE3BC,QAF2B;;AAAA,mBAGfP,QAAQ,EAHO;AAAA,MAGlCQ,KAHkC;AAAA,MAG3BC,QAH2B;;AAKzC,MAAMC,MAAM,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAf;AACA,MAAMC,KAAK,GAAG,IAAIF,IAAJ,GAAWG,QAAX,KAAwB,CAAtC;AACA,MAAMC,OAAO,mBAAYF,KAAZ,cAAqBH,MAArB,CAAb;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACd,aAAee,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEX,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ,CAAC,IAAD,CAAR;AAFF;AAAA;AAAA,+CAIuBU,KAAK,CAACd,GAAD,CAJ5B;;AAAA;AAIUe,cAAAA,IAJV;AAAA;AAAA,+CAK2BA,IAAI,CAACC,IAAL,EAL3B;;AAAA;AAKUC,cAAAA,QALV;AAOIA,cAAAA,QAAQ,CAACC,GAAT,CAAa,UAAAC,GAAG,EAAI;AAClB,oBAAIA,GAAG,CAACC,gBAAJ,KAAyBR,OAA7B,EAAsC;AACpCN,kBAAAA,QAAQ,CAAC,CAAD,CAAR;AACD;AACF,eAJD;AAPJ;AAAA;;AAAA;AAAA;AAAA;AAaIF,cAAAA,QAAQ,aAAR;;AAbJ;AAeEF,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBAW,IAAAA,SAAS;AACT,WAAO,YAAM,CAAE,CAAf,CApBc,CAqBd;AACD,GAtBQ,EAsBN,EAtBM,CAAT;AAwBA,SAAO;AAAEZ,IAAAA,OAAO,EAAPA,OAAF;AAAWE,IAAAA,KAAK,EAALA,KAAX;AAAkBE,IAAAA,KAAK,EAALA;AAAlB,GAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useDailyStats(url) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState();\n\n  const dayNow = new Date().getDate();\n  const month = new Date().getMonth() + 1;\n  const dateNow = `2020/0${month}/${dayNow}`;\n\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError(null);\n      try {\n        const data = await fetch(url);\n        const response = await data.json();\n\n        response.map(day => {\n          if (day.reportDateString === dateNow) {\n            setStats(2);\n          }\n        });\n      } catch (error) {\n        setError(error);\n      }\n      setLoading(false);\n    }\n\n    fetchData();\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return { loading, error, stats };\n}\n"]},"metadata":{},"sourceType":"module"}